version: '3'

services:

  kafka:
    image: docker.io/bitnami/kafka:3.6
    container_name: kafka_container
    hostname: kafka_host
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_HOST://:29092,CONTROLLER://:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092

    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --list --bootstrap-server localhost:9092"]
      interval: 3s
      timeout: 3s
      retries: 3

    volumes:
      - kafka_data:/bitnami


  mongodb:
    image: mongo:latest
    container_name: mongodb_container
    hostname: mongodb_host
    ports:
      - '27017:27017'
    volumes:
      - mongodb_data:/data/db
    command: --quiet


  producer_loop:
    build:
      context: ./parser_producer
    container_name: producer_loop
    depends_on:
      kafka:
        condition: service_healthy
    command: poetry run python -m run


  consumer_loop:
    build:
      context: ./reader_consumer
    container_name: consumer_loop
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_started
    command: poetry run python -m run


  web_app:
    build:
      context: ./web_src
    container_name: web_app
    ports:
      - "8800:8800"
    depends_on:
      mongodb:
        condition: service_started
    command: poetry run python -m run


volumes:
  kafka_data:
  mongodb_data:
